From 388f4f513569939ad6f6e82020f447ebe98e8afd Mon Sep 17 00:00:00 2001
From: Stephan Hartmann <stha09@googlemail.com>
Date: Fri, 4 Sep 2020 09:07:36 +0000
Subject: [PATCH] GCC: fix template specialization in
 AsyncCallWithBoundArgsBuilder

GCC complains that explicit specialization in non-namespace scope
is happening for AsyncCallWithBoundArgsBuilder. Move
AsyncCallWithBoundArgsBuilder implementations into different
nested classes and select implementation using std::conditional.
---
 base/threading/sequence_bound.h | 27 +++++++++++++++++----------
 1 file changed, 17 insertions(+), 10 deletions(-)

diff --git a/base/threading/sequence_bound.h b/base/threading/sequence_bound.h
index 217a1d5..b7299ed 100644
--- a/base/threading/sequence_bound.h
+++ b/base/threading/sequence_bound.h
@@ -509,10 +509,10 @@ class SequenceBound {
   // Note: this doesn't handle a void return type, which has an explicit
   // specialization below.
   template <typename ReturnType>
-  class AsyncCallWithBoundArgsBuilder
+  class AsyncCallWithBoundArgsBuilderDefault
       : public AsyncCallWithBoundArgsBuilderBase<ReturnType> {
    public:
-    ~AsyncCallWithBoundArgsBuilder() {
+    ~AsyncCallWithBoundArgsBuilderDefault() {
       // Must use Then() since the method's return type is not void.
       // Should be optimized out if the code is bug-free.
       CHECK(!this->sequence_bound_);
@@ -535,13 +535,13 @@ class SequenceBound {
    private:
     friend SequenceBound;
 
-    AsyncCallWithBoundArgsBuilder(AsyncCallWithBoundArgsBuilder&&) = default;
-    AsyncCallWithBoundArgsBuilder& operator=(AsyncCallWithBoundArgsBuilder&&) =
-        default;
+    AsyncCallWithBoundArgsBuilderDefault(
+        AsyncCallWithBoundArgsBuilderDefault&&) = default;
+    AsyncCallWithBoundArgsBuilderDefault& operator=(
+        AsyncCallWithBoundArgsBuilderDefault&&) = default;
   };
 
-  template <>
-  class AsyncCallWithBoundArgsBuilder<void>
+  class AsyncCallWithBoundArgsBuilderVoid
       : public AsyncCallWithBoundArgsBuilderBase<void> {
    public:
     // Note: despite being here, this is actually still protected, since it is
@@ -549,7 +549,7 @@ class SequenceBound {
     using AsyncCallWithBoundArgsBuilderBase<
         void>::AsyncCallWithBoundArgsBuilderBase;
 
-    ~AsyncCallWithBoundArgsBuilder() {
+    ~AsyncCallWithBoundArgsBuilderVoid() {
       if (this->sequence_bound_) {
         this->sequence_bound_->impl_task_runner_->PostTask(
             *this->location_, std::move(this->callback_));
@@ -566,11 +566,18 @@ class SequenceBound {
    private:
     friend SequenceBound;
 
-    AsyncCallWithBoundArgsBuilder(AsyncCallWithBoundArgsBuilder&&) = default;
-    AsyncCallWithBoundArgsBuilder& operator=(AsyncCallWithBoundArgsBuilder&&) =
+    AsyncCallWithBoundArgsBuilderVoid(AsyncCallWithBoundArgsBuilderVoid&&) =
         default;
+    AsyncCallWithBoundArgsBuilderVoid& operator=(
+        AsyncCallWithBoundArgsBuilderVoid&&) = default;
   };
 
+  template <typename ReturnType>
+  using AsyncCallWithBoundArgsBuilder = typename std::conditional<
+      std::is_void<ReturnType>::value,
+      AsyncCallWithBoundArgsBuilderVoid,
+      AsyncCallWithBoundArgsBuilderDefault<ReturnType>>::type;
+
   void PostTaskAndThenHelper(const Location& location,
                              OnceCallback<void()> callback,
                              OnceClosure then_callback) {
-- 
2.26.2

