From 29c6a7c686411deae7066dc54dfb2b718cf56db3 Mon Sep 17 00:00:00 2001
From: Stephan Hartmann <stha09@googlemail.com>
Date: Fri, 4 Dec 2020 14:30:43 +0000
Subject: [PATCH] GCC: add missing cast to std::stringstream

Operator << of std::stringstream returns a reference to std::ostream
which has no member function str(). Fix this by casting resulting
std::ostream reference to std::stringstream reference.
---
 .../web_app_internals_page_handler_impl.cc    |   2 +-
 .../external_web_app_manager.cc               |   4 +-
 .../external_web_app_utils.cc                 | 226 +++++++++++-------
 3 files changed, 139 insertions(+), 93 deletions(-)

diff --git a/chrome/browser/ui/webui/internals/web_app/web_app_internals_page_handler_impl.cc b/chrome/browser/ui/webui/internals/web_app/web_app_internals_page_handler_impl.cc
index 339fc5a..c240961 100644
--- a/chrome/browser/ui/webui/internals/web_app/web_app_internals_page_handler_impl.cc
+++ b/chrome/browser/ui/webui/internals/web_app/web_app_internals_page_handler_impl.cc
@@ -23,7 +23,7 @@ namespace {
 
 template <typename T>
 std::string ConvertToString(const T& value) {
-  return (std::stringstream() << value).str();
+  return static_cast<std::stringstream&>((std::stringstream() << value)).str();
 }
 
 }  // namespace
diff --git a/chrome/browser/web_applications/external_web_app_manager.cc b/chrome/browser/web_applications/external_web_app_manager.cc
index 3da14c1..61f77be 100644
--- a/chrome/browser/web_applications/external_web_app_manager.cc
+++ b/chrome/browser/web_applications/external_web_app_manager.cc
@@ -100,7 +100,9 @@ LoadedConfigs LoadConfigsBlocking(const base::FilePath& config_dir) {
         deserializer.Deserialize(nullptr, &error_msg);
     if (!app_config) {
       result.errors.push_back(
-          (std::stringstream() << file << " was not valid JSON: " << error_msg)
+          static_cast<std::stringstream&>(
+              (std::stringstream()
+               << file << " was not valid JSON: " << error_msg))
               .str());
       VLOG(1) << result.errors.back();
       continue;
diff --git a/chrome/browser/web_applications/external_web_app_utils.cc b/chrome/browser/web_applications/external_web_app_utils.cc
index 8b3414d..28f054f 100644
--- a/chrome/browser/web_applications/external_web_app_utils.cc
+++ b/chrome/browser/web_applications/external_web_app_utils.cc
@@ -158,26 +158,32 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   options.require_manifest = true;
 
   if (app_config.type() != base::Value::Type::DICTIONARY) {
-    return (std::stringstream()
-            << file << " was not a dictionary as the top level")
+    return static_cast<std::stringstream&>(
+               (std::stringstream()
+                << file << " was not a dictionary as the top level"))
         .str();
   }
 
   // user_type
   const base::Value* value = app_config.FindListKey(kUserType);
   if (!value) {
-    return (std::stringstream() << file << " missing " << kUserType).str();
+    return static_cast<std::stringstream&>(
+               (std::stringstream() << file << " missing " << kUserType))
+        .str();
   }
   for (const auto& item : value->GetList()) {
     if (!item.is_string()) {
-      return (std::stringstream()
-              << file << " has invalid " << kUserType << item)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " has invalid "
+                                              << kUserType << item))
           .str();
     }
     options.user_type_allowlist.push_back(item.GetString());
   }
   if (options.user_type_allowlist.empty()) {
-    return (std::stringstream() << file << " has empty " << kUserType).str();
+    return static_cast<std::stringstream&>(
+               (std::stringstream() << file << " has empty " << kUserType))
+        .str();
   }
 
   // feature_name
@@ -188,19 +194,24 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   // app_url
   value = app_config.FindKeyOfType(kAppUrl, base::Value::Type::STRING);
   if (!value) {
-    return (std::stringstream() << file << " had a missing " << kAppUrl).str();
+    return static_cast<std::stringstream&>(
+               (std::stringstream() << file << " had a missing " << kAppUrl))
+        .str();
   }
   options.install_url = GURL(value->GetString());
   if (!options.install_url.is_valid()) {
-    return (std::stringstream() << file << " had an invalid " << kAppUrl).str();
+    return static_cast<std::stringstream&>(
+               (std::stringstream() << file << " had an invalid " << kAppUrl))
+        .str();
   }
 
   // only_for_new_users
   value = app_config.FindKey(kOnlyForNewUsers);
   if (value) {
     if (!value->is_bool()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kOnlyForNewUsers)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kOnlyForNewUsers))
           .str();
     }
     options.only_for_new_users = value->GetBool();
@@ -211,8 +222,9 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   value = app_config.FindKey(kHideFromUser);
   if (value) {
     if (!value->is_bool()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kHideFromUser)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kHideFromUser))
           .str();
     }
     hide_from_user = value->GetBool();
@@ -226,8 +238,9 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   value = app_config.FindKey(kCreateShortcuts);
   if (value) {
     if (!value->is_bool()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kCreateShortcuts)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kCreateShortcuts))
           .str();
     }
     create_shortcuts = value->GetBool();
@@ -242,8 +255,9 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   value = app_config.FindKey(kDisableIfArcSupported);
   if (value) {
     if (!value->is_bool()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kDisableIfArcSupported)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kDisableIfArcSupported))
           .str();
     }
     options.disable_if_arc_supported = value->GetBool();
@@ -253,8 +267,9 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   value = app_config.FindKey(kDisableIfTabletFormFactor);
   if (value) {
     if (!value->is_bool()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kDisableIfTabletFormFactor)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kDisableIfTabletFormFactor))
           .str();
     }
     options.disable_if_tablet_form_factor = value->GetBool();
@@ -263,8 +278,9 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   // launch_container
   value = app_config.FindKeyOfType(kLaunchContainer, base::Value::Type::STRING);
   if (!value) {
-    return (std::stringstream()
-            << file << " had an invalid " << kLaunchContainer)
+    return static_cast<std::stringstream&>((std::stringstream()
+                                            << file << " had an invalid "
+                                            << kLaunchContainer))
         .str();
   }
   std::string launch_container_str = value->GetString();
@@ -273,9 +289,10 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   } else if (launch_container_str == kLaunchContainerWindow) {
     options.user_display_mode = DisplayMode::kStandalone;
   } else {
-    return (std::stringstream()
-            << file << " had an invalid " << kLaunchContainer << ": "
-            << launch_container_str)
+    return static_cast<std::stringstream&>((std::stringstream()
+                                            << file << " had an invalid "
+                                            << kLaunchContainer << ": "
+                                            << launch_container_str))
         .str();
   }
 
@@ -283,8 +300,9 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   value = app_config.FindKey(kLaunchQueryParams);
   if (value) {
     if (!value->is_string()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kLaunchQueryParams)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kLaunchQueryParams))
           .str();
     }
     options.launch_query_params = value->GetString();
@@ -294,8 +312,10 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   value = app_config.FindKey(kLoadAndAwaitServiceWorkerRegistration);
   if (value) {
     if (!value->is_bool()) {
-      return (std::stringstream() << file << " had an invalid "
-                                  << kLoadAndAwaitServiceWorkerRegistration)
+      return static_cast<std::stringstream&>(
+                 (std::stringstream()
+                  << file << " had an invalid "
+                  << kLoadAndAwaitServiceWorkerRegistration))
           .str();
     }
     options.load_and_await_service_worker_registration = value->GetBool();
@@ -305,21 +325,24 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   value = app_config.FindKey(kServiceWorkerRegistrationUrl);
   if (value) {
     if (!options.load_and_await_service_worker_registration) {
-      return (std::stringstream()
-              << file << " should not specify a "
-              << kServiceWorkerRegistrationUrl << " while "
-              << kLoadAndAwaitServiceWorkerRegistration << " is disabled")
+      return static_cast<std::stringstream&>(
+                 (std::stringstream()
+                  << file << " should not specify a "
+                  << kServiceWorkerRegistrationUrl << " while "
+                  << kLoadAndAwaitServiceWorkerRegistration << " is disabled"))
           .str();
     }
     if (!value->is_string()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kServiceWorkerRegistrationUrl)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kServiceWorkerRegistrationUrl))
           .str();
     }
     options.service_worker_registration_url.emplace(value->GetString());
     if (!options.service_worker_registration_url->is_valid()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kServiceWorkerRegistrationUrl)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kServiceWorkerRegistrationUrl))
           .str();
     }
   }
@@ -328,16 +351,18 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   value = app_config.FindKey(kUninstallAndReplace);
   if (value) {
     if (!value->is_list()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kUninstallAndReplace)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kUninstallAndReplace))
           .str();
     }
     base::Value::ConstListView uninstall_and_replace_values = value->GetList();
 
     for (const auto& app_id_value : uninstall_and_replace_values) {
       if (!app_id_value.is_string()) {
-        return (std::stringstream() << file << " had an invalid "
-                                    << kUninstallAndReplace << " entry")
+        return static_cast<std::stringstream&>(
+                   (std::stringstream() << file << " had an invalid "
+                                        << kUninstallAndReplace << " entry"))
             .str();
       }
       options.uninstall_and_replace.push_back(app_id_value.GetString());
@@ -348,8 +373,9 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   value = app_config.FindKey(kOnlyUseOfflineManifest);
   if (value) {
     if (!value->is_bool()) {
-      return (std::stringstream()
-              << file << " had an invalid " << kOnlyUseOfflineManifest)
+      return static_cast<std::stringstream&>((std::stringstream()
+                                              << file << " had an invalid "
+                                              << kOnlyUseOfflineManifest))
           .str();
     }
     options.only_use_app_info_factory = value->GetBool();
@@ -369,9 +395,10 @@ OptionsOrError ParseConfig(FileUtilsWrapper& file_utils,
   }
 
   if (options.only_use_app_info_factory && !options.app_info_factory) {
-    return (std::stringstream()
-            << file << kOnlyUseOfflineManifest << " set with no "
-            << kOfflineManifest << " available")
+    return static_cast<std::stringstream&>(
+               (std::stringstream()
+                << file << kOnlyUseOfflineManifest << " set with no "
+                << kOfflineManifest << " available"))
         .str();
   }
 
@@ -389,17 +416,19 @@ WebApplicationInfoFactoryOrError ParseOfflineManifest(
   const std::string* name_string =
       offline_manifest.FindStringKey(kOfflineManifestName);
   if (!name_string) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " " << kOfflineManifestName
-            << " missing or invalid.")
+    return static_cast<std::stringstream&>((std::stringstream()
+                                            << file << " " << kOfflineManifest
+                                            << " " << kOfflineManifestName
+                                            << " missing or invalid."))
         .str();
   }
   if (!base::UTF8ToUTF16(name_string->data(), name_string->size(),
                          &app_info.title) ||
       app_info.title.empty()) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " " << kOfflineManifestName
-            << " invalid: " << *name_string)
+    return static_cast<std::stringstream&>((std::stringstream()
+                                            << file << " " << kOfflineManifest
+                                            << " " << kOfflineManifestName
+                                            << " invalid: " << *name_string))
         .str();
   }
 
@@ -407,16 +436,18 @@ WebApplicationInfoFactoryOrError ParseOfflineManifest(
   const std::string* start_url_string =
       offline_manifest.FindStringKey(kOfflineManifestStartUrl);
   if (!start_url_string) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " "
-            << kOfflineManifestStartUrl << " missing or invalid.")
+    return static_cast<std::stringstream&>((std::stringstream()
+                                            << file << " " << kOfflineManifest
+                                            << " " << kOfflineManifestStartUrl
+                                            << " missing or invalid."))
         .str();
   }
   app_info.start_url = GURL(*start_url_string);
   if (!app_info.start_url.is_valid()) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " "
-            << kOfflineManifestStartUrl << " invalid: " << *start_url_string)
+    return static_cast<std::stringstream&>(
+               (std::stringstream() << file << " " << kOfflineManifest << " "
+                                    << kOfflineManifestStartUrl
+                                    << " invalid: " << *start_url_string))
         .str();
   }
 
@@ -424,24 +455,28 @@ WebApplicationInfoFactoryOrError ParseOfflineManifest(
   const std::string* scope_string =
       offline_manifest.FindStringKey(kOfflineManifestScope);
   if (!scope_string) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " " << kOfflineManifestScope
-            << " missing or invalid.")
+    return static_cast<std::stringstream&>((std::stringstream()
+                                            << file << " " << kOfflineManifest
+                                            << " " << kOfflineManifestScope
+                                            << " missing or invalid."))
         .str();
   }
   app_info.scope = GURL(*scope_string);
   if (!app_info.scope.is_valid()) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " " << kOfflineManifestScope
-            << " invalid: " << *scope_string)
+    return static_cast<std::stringstream&>((std::stringstream()
+                                            << file << " " << kOfflineManifest
+                                            << " " << kOfflineManifestScope
+                                            << " invalid: " << *scope_string))
         .str();
   }
   if (!base::StartsWith(app_info.start_url.path(), app_info.scope.path(),
                         base::CompareCase::SENSITIVE)) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " " << kOfflineManifestScope
-            << " (" << app_info.start_url << ") not within "
-            << kOfflineManifestScope << " (" << app_info.scope << ").")
+    return static_cast<std::stringstream&>(
+               (std::stringstream()
+                << file << " " << kOfflineManifest << " "
+                << kOfflineManifestScope << " (" << app_info.start_url
+                << ") not within " << kOfflineManifestScope << " ("
+                << app_info.scope << ")."))
         .str();
   }
 
@@ -449,16 +484,18 @@ WebApplicationInfoFactoryOrError ParseOfflineManifest(
   const std::string* display_string =
       offline_manifest.FindStringKey(kOfflineManifestDisplay);
   if (!display_string) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " " << kOfflineManifestDisplay
-            << " missing or invalid.")
+    return static_cast<std::stringstream&>((std::stringstream()
+                                            << file << " " << kOfflineManifest
+                                            << " " << kOfflineManifestDisplay
+                                            << " missing or invalid."))
         .str();
   }
   DisplayMode display = blink::DisplayModeFromString(*display_string);
   if (display == DisplayMode::kUndefined) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " " << kOfflineManifestDisplay
-            << " invalid: " << display_string)
+    return static_cast<std::stringstream&>((std::stringstream()
+                                            << file << " " << kOfflineManifest
+                                            << " " << kOfflineManifestDisplay
+                                            << " invalid: " << display_string))
         .str();
   }
   app_info.display_mode = display;
@@ -467,25 +504,28 @@ WebApplicationInfoFactoryOrError ParseOfflineManifest(
   const base::Value* icon_files =
       offline_manifest.FindListKey(kOfflineManifestIconAnyPngs);
   if (!icon_files || icon_files->GetList().empty()) {
-    return (std::stringstream()
-            << file << " " << kOfflineManifest << " "
-            << kOfflineManifestIconAnyPngs << " missing, empty or invalid.")
+    return static_cast<std::stringstream&>(
+               (std::stringstream() << file << " " << kOfflineManifest << " "
+                                    << kOfflineManifestIconAnyPngs
+                                    << " missing, empty or invalid."))
         .str();
   }
   for (const base::Value& icon_file : icon_files->GetList()) {
     if (!icon_file.is_string()) {
-      return (std::stringstream()
-              << file << " " << kOfflineManifest << " "
-              << kOfflineManifestIconAnyPngs << " " << icon_file << " invalid.")
+      return static_cast<std::stringstream&>(
+                 (std::stringstream() << file << " " << kOfflineManifest << " "
+                                      << kOfflineManifestIconAnyPngs << " "
+                                      << icon_file << " invalid."))
           .str();
     }
 
     base::FilePath icon_path = dir.AppendASCII(icon_file.GetString());
     std::string icon_data;
     if (!file_utils.ReadFileToString(icon_path, &icon_data)) {
-      return (std::stringstream() << file << " " << kOfflineManifest << " "
-                                  << kOfflineManifestIconAnyPngs << " "
-                                  << icon_file << " failed to read.")
+      return static_cast<std::stringstream&>(
+                 (std::stringstream() << file << " " << kOfflineManifest << " "
+                                      << kOfflineManifestIconAnyPngs << " "
+                                      << icon_file << " failed to read."))
           .str();
     }
 
@@ -493,17 +533,20 @@ WebApplicationInfoFactoryOrError ParseOfflineManifest(
     if (!gfx::PNGCodec::Decode(
             reinterpret_cast<const unsigned char*>(icon_data.c_str()),
             icon_data.size(), &bitmap)) {
-      return (std::stringstream() << file << " " << kOfflineManifest << " "
-                                  << kOfflineManifestIconAnyPngs << " "
-                                  << icon_file << " failed to decode.")
+      return static_cast<std::stringstream&>(
+                 (std::stringstream() << file << " " << kOfflineManifest << " "
+                                      << kOfflineManifestIconAnyPngs << " "
+                                      << icon_file << " failed to decode."))
           .str();
     }
 
     if (bitmap.width() != bitmap.height()) {
-      return (std::stringstream() << file << " " << kOfflineManifest << " "
-                                  << kOfflineManifestIconAnyPngs << " "
-                                  << icon_file << " must be square: "
-                                  << bitmap.width() << "x" << bitmap.height())
+      return static_cast<std::stringstream&>(
+                 (std::stringstream()
+                  << file << " " << kOfflineManifest << " "
+                  << kOfflineManifestIconAnyPngs << " " << icon_file
+                  << " must be square: " << bitmap.width() << "x"
+                  << bitmap.height()))
           .str();
     }
 
@@ -521,9 +564,10 @@ WebApplicationInfoFactoryOrError ParseOfflineManifest(
     SkColor theme_color;
     if (!theme_color_argb_hex ||
         !base::HexStringToUInt(*theme_color_argb_hex, &theme_color)) {
-      return (std::stringstream() << file << " " << kOfflineManifest << " "
-                                  << kOfflineManifestThemeColorArgbHex
-                                  << " invalid: " << *theme_color_value)
+      return static_cast<std::stringstream&>(
+                 (std::stringstream() << file << " " << kOfflineManifest << " "
+                                      << kOfflineManifestThemeColorArgbHex
+                                      << " invalid: " << *theme_color_value))
           .str();
     }
     app_info.theme_color = SkColorSetA(theme_color, SK_AlphaOPAQUE);
-- 
2.26.2

