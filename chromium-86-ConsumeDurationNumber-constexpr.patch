From f33b01f69087ff2b66c50b88145675138dedfa7b Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jdapena@igalia.com>
Date: Wed, 09 Sep 2020 12:16:00 +0000
Subject: [PATCH] GCC: make begin/end/empty methods of StringPiece constexpr to allow them to be called from base::ConsumeDurationNumber

Compilation fails in GCC in base::ConsumeDurationNumber, as it
is a constexpr but it calls methods begin/end/empty in
StringPiece that are not constexpr. This change makes them
constexpr.
../../base/time/time.cc: In function ‘constexpr base::Optional<base::{anonymous}::ParsedDecimal> base::{anonymous}::ConsumeDurationNumber(base::StringPiece&)’:
../../base/time/time.cc:67:63: error: call to non-‘constexpr’ function ‘const value_type* base::BasicStringPiece<STRING_TYPE>::begin() const [with STRING_TYPE = std::__cxx11::basic_string<char>; base::BasicStringPiece<STRING_TYPE>::const_iterator = const char*; base::BasicStringPiece<STRING_TYPE>::value_type = char]’
   67 |   StringPiece::const_iterator orig_start = number_string.begin();
      |                                            ~~~~~~~~~~~~~~~~~~~^~

Bug: 819294, 1049498
Change-Id: If8813ac2651ac444cde7b874a1540c98c256c5b8
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2394159
Reviewed-by: Jan Wilken Dörrie <jdoerrie@chromium.org>
Commit-Queue: José Dapena Paz <jdapena@igalia.com>
Cr-Commit-Position: refs/heads/master@{#805282}

(rebased for chromium-86)
---

diff --git a/base/strings/string_piece.h b/base/strings/string_piece.h
index c650cfa..bbd1f22 100644
--- a/base/strings/string_piece.h
+++ b/base/strings/string_piece.h
@@ -198,7 +198,7 @@ template <typename STRING_TYPE> class BasicStringPiece {
   constexpr const value_type* data() const { return ptr_; }
   constexpr size_type size() const noexcept { return length_; }
   constexpr size_type length() const noexcept { return length_; }
-  bool empty() const { return length_ == 0; }
+  constexpr bool empty() const noexcept { return length_ == 0; }
 
   constexpr value_type operator[](size_type i) const {
     CHECK(i < length_);
@@ -244,12 +244,12 @@ template <typename STRING_TYPE> class BasicStringPiece {
     return empty() ? STRING_TYPE() : STRING_TYPE(data(), size());
   }
 
-  const_iterator begin() const { return ptr_; }
-  const_iterator end() const { return ptr_ + length_; }
-  const_reverse_iterator rbegin() const {
+  constexpr const_iterator begin() const noexcept { return ptr_; }
+  constexpr const_iterator end() const noexcept { return ptr_ + length_; }
+  constexpr const_reverse_iterator rbegin() const noexcept {
     return const_reverse_iterator(ptr_ + length_);
   }
-  const_reverse_iterator rend() const {
+  constexpr const_reverse_iterator rend() const noexcept {
     return const_reverse_iterator(ptr_);
   }
 
