From bb5033e4031eec84bfaffe759c5f42f733d2e425 Mon Sep 17 00:00:00 2001
From: Jan Wilken Dörrie <jdoerrie@chromium.org>
Date: Thu, 03 Dec 2020 01:05:28 +0000
Subject: [PATCH] [base] Inline default assignment operators in flat_tree

This change inlines the defaulted assignment operators in flat_tree.
Furthermore, this works around a compiler bug exposed in old GCC
versions.

Fixed: 1154608
Change-Id: I488b6003de6630d2d18b7849bc903db2d41ed9bf
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2566943
Commit-Queue: Daniel Cheng <dcheng@chromium.org>
Reviewed-by: Daniel Cheng <dcheng@chromium.org>
Auto-Submit: Jan Wilken Dörrie <jdoerrie@chromium.org>
Cr-Commit-Position: refs/heads/master@{#833080}
---

diff --git a/base/containers/flat_tree.h b/base/containers/flat_tree.h
index 2cc9ad5..1cd1b32 100644
--- a/base/containers/flat_tree.h
+++ b/base/containers/flat_tree.h
@@ -228,9 +228,9 @@
   //
   // Assume that move assignment invalidates iterators and references.
 
-  flat_tree& operator=(const flat_tree&);
+  flat_tree& operator=(const flat_tree&) = default;
   flat_tree& operator=(flat_tree&&) noexcept(
-      std::is_nothrow_move_assignable<container_type>::value);
+      std::is_nothrow_move_assignable<container_type>::value) = default;
   // Takes the first if there are duplicates in the initializer list.
   flat_tree& operator=(std::initializer_list<value_type> ilist);
 
@@ -636,16 +636,6 @@
 
 template <class Key, class GetKeyFromValue, class KeyCompare, class Container>
 auto flat_tree<Key, GetKeyFromValue, KeyCompare, Container>::operator=(
-    const flat_tree&) -> flat_tree& = default;
-
-template <class Key, class GetKeyFromValue, class KeyCompare, class Container>
-auto flat_tree<Key, GetKeyFromValue, KeyCompare, Container>::
-operator=(flat_tree&&) noexcept(
-    std::is_nothrow_move_assignable<container_type>::value)
-    -> flat_tree& = default;
-
-template <class Key, class GetKeyFromValue, class KeyCompare, class Container>
-auto flat_tree<Key, GetKeyFromValue, KeyCompare, Container>::operator=(
     std::initializer_list<value_type> ilist) -> flat_tree& {
   body_ = ilist;
   sort_and_unique();
